<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <title>Blueberry - Task Scheduler</title>
    <link href="https://cdn.jsdelivr.net/npm/flowbite@2.4.1/dist/flowbite.min.css" rel="stylesheet"/>
    <script>
        // On page load or when changing themes, best to add inline in `head` to avoid FOUC
        if (localStorage.getItem('color-theme') === 'dark' || (!('color-theme' in localStorage) && window.matchMedia('(prefers-color-scheme: dark)').matches)) {
            document.documentElement.classList.add('dark');
        } else {
            document.documentElement.classList.remove('dark');
        }

        function openModal(id) {
            document.getElementById('modal').classList.remove('hidden');
            document.getElementById('cancelForm').action = `/execution/${id}/cancel`;
        }

        function closeModal() {
            document.getElementById('modal').classList.add('hidden');
        }

        function filterLogs(level) {
            const logsTable = document.getElementById("logs-table");
            const rows = logsTable.querySelectorAll("tbody tr");

            rows.forEach(row => {
                if (level === 'all' || row.dataset.level === level) {
                    row.style.display = '';
                } else {
                    row.style.display = 'none';
                }
            });

            // Update analytics
            updateAnalytics(level);
        }

        function updateAnalytics(level) {
            const rows = document.querySelectorAll('table tbody tr');
            const totalLogs = rows.length;
            let visibleLogs = 0;
            rows.forEach(row => {
                if (level === 'all' || row.style.display !== 'none') {
                    visibleLogs++;
                }
            });
            document.getElementById('totalLogs').innerText = `Total Logs: ${totalLogs}`;
            document.getElementById('visibleLogs').innerText = `Visible Logs: ${visibleLogs}`;
        }

        document.addEventListener('DOMContentLoaded', () => {
            updateAnalytics('all');
        });
    </script>
</head>
<body class="bg-gray-100 text-gray-900 dark:bg-gray-800 dark:text-gray-100">
{{ template "navbar.goml" . }}
<div class="container mx-auto p-6">
    <div class="flex justify-between items-center mb-6">
        <h1 class="text-3xl font-bold dark:text-white">Execution ID: {{.ID}}</h1>
        {{if eq .Status "started"}}
            <button onclick="openModal({{.ID}})" class="px-4 py-2 bg-red-500 text-white rounded">Cancel</button>
        {{end}}
    </div>
    <table class="table-auto w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400 mb-4">
        <tbody>
        <tr>
            <td class="px-6 py-4 font-medium text-gray-900 dark:text-gray-100">Task:</td>
            <td class="px-6 py-4">{{.TaskName}}</td>
        </tr>
        <tr>
            <td class="px-6 py-4 font-medium text-gray-900 dark:text-gray-100">Start Time:</td>
            <td class="px-6 py-4">{{.StartTime | formatDateTime}}</td>
        </tr>
        <tr>
            <td class="px-6 py-4 font-medium text-gray-900 dark:text-gray-100">End Time:</td>
            <td class="px-6 py-4">{{if eq .Status "started"}}None{{else}}{{.EndTime | formatDateTime}}{{end}}</td>
        </tr>
        <tr>
            <td class="px-6 py-4 font-medium text-gray-900 dark:text-gray-100">Status:</td>
            <td class="px-6 py-4">{{.Status}}</td>
        </tr>
        </tbody>
    </table>

    <h2 class="text-2xl font-semibold mt-4 mb-2 dark:text-white">Logs</h2>
    <div class="flex mb-4">
        <div class="w-1/2">
            <label for="logLevelFilter" class="block text-sm font-medium text-gray-700 dark:text-gray-300">Filter by Level:</label>
            <select id="logLevelFilter" onchange="filterLogs(this.value)" class="mt-1 block w-full p-2.5 bg-white dark:bg-gray-800 border border-gray-300 dark:border-gray-700 rounded-md shadow-sm">
                <option value="all">All</option>
                <option value="info">Info</option>
                <option value="success">Success</option>
                <option value="error">Error</option>
            </select>
        </div>
        <div class="w-1/2 flex items-center justify-center text-sm font-medium text-gray-700 dark:text-gray-300">
            <div id="totalLogs" class="mr-4 p-2 bg-gray-100 dark:bg-gray-800 rounded-md shadow-sm"></div>
            <div id="visibleLogs" class="p-2 bg-gray-100 dark:bg-gray-800 rounded-md shadow-sm"></div>
        </div>
    </div>
    <div class="relative overflow-x-auto shadow-md sm:rounded-lg">
        <table id="logs-table" class="w-full text-sm text-left rtl:text-right text-gray-500 dark:text-gray-400">
            <thead class="text-xs text-gray-700 uppercase bg-gray-50 dark:bg-gray-700 dark:text-gray-400">
            <tr>
                <th scope="col" class="px-6 py-3">Level</th>
                <th scope="col" class="px-6 py-3">Timestamp</th>
                <th scope="col" class="px-6 py-3">Message</th>
            </tr>
            </thead>
            <tbody>
            {{range .Logs}}
                <tr class="bg-white border-b dark:bg-gray-800 dark:border-gray-700" data-level="{{.Level}}">
                    <td class="px-6 py-4 font-medium {{if eq .Level "success"}}text-green-500 dark:text-green-400{{else if eq .Level "error"}}text-red-500 dark:text-red-400{{end}}">
                        {{.Level}}
                    </td>
                    <td class="px-6 py-4">{{.Timestamp | formatDateTime}}</td>
                    <td class="px-6 py-4">{{.Message}}</td>
                </tr>
            {{end}}
            </tbody>
        </table>
    </div>
    <a href="/task/{{.TaskName}}" class="text-blue-500 hover:underline mt-4 inline-block">Back to task</a>
</div>

<!-- Modal -->
<div id="modal" class="w-2/3 fixed inset-0 flex items-center justify-center bg-black bg-opacity-50 hidden">
    <div class="bg-white dark:bg-gray-700 rounded-lg shadow-lg p-6 max-w-sm mx-auto">
        <h2 class="text-lg font-semibold mb-4 dark:text-white">Confirm Cancellation</h2>
        <p class="mb-4 dark:text-gray-300">Are you sure you want to cancel this task?</p>
        <form id="cancelForm" method="POST" onsubmit="closeModal()">
            <div class="flex justify-end">
                <button type="button" onclick="closeModal()" class="px-4 py-2 mr-2 bg-gray-500 text-white rounded">No</button>
                <button type="submit" class="px-4 py-2 bg-red-500 text-white rounded">Yes, Cancel</button>
            </div>
        </form>
    </div>
</div>

{{ template "scripts.goml" . }}
</body>
</html>
